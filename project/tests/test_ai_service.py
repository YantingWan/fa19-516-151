from server import create_app
from flask import jsonify
import sys
import os
import json
from inspect import signature
from sklearn.linear_model import LinearRegression
from werkzeug.test import EnvironBuilder
from io import StringIO, BytesIO
import numpy as np
import pytest
import cloudmesh.ai_services as ai

def test_config():
    """
    Test if configuration of the app is in the testing mode
    :return:
    """
    assert not create_app().testing
    assert create_app({'TESTING': True}).testing

class TestUpload:

    def post_file(self,client, path, name):
        f = open(path, 'rb')
        # Simulate post request to upload the file
        response = client.post(path='/cloudmesh-ai-services/upload',
                               data={'file': (f, name)})
        f.close()
        return response.data

    def test_success_upload(self, client):
        """
        Test upload. The file will be uploaded in to the current directory named files
        The test sample will use a empty csv file called test upload
        :param client:
        :return: A binary string that includes a list of uploaded file names
        """
        assert self.post_file(client, './test_assets/test_upload.csv','test_upload.csv') \
               == \
               b'{"file_name":"test_upload.csv"}\n'

    def test_format_error(self, client):
        """
        The upload will failed due to the txt file format. An error message will return.
        :param client:
        :return:
        """
        assert self.post_file(client, './test_assets/test_upload.csv', 'test_upload.txt') \
               == \
               b'{"error_message":"Wrong file format"}\n'

class TestLinearRegression:

    @pytest.fixture(scope='class')
    def sample_paras(self):
        """
        Return a list sample parameters
        :return:
        """
        return np.load('../tests/test_assets/test_paras.npy', allow_pickle=True).item()

    def test_generate_sample_parameters(self, client):
        """
        This is for generating the sample parameters
        :param client:
        :return:
        """
        response = client.post(path='/cloudmesh-ai-services/linear-regression/test_upload',
                               data=json.dumps({
                                   'file_name': 'test_upload',
                                   'paras':
                                       {
                                           'fit_intercept': True,
                                           'normalize': False,
                                           'n_jobs': 1
                                       }
                               }),
                               content_type='application/json')


    def test_parameters_type(self, sample_paras):
        """
        Test parameters type. The sample was generated by the server when received the body content
        :return:
        """
        paras = sample_paras

        assert  int is type(paras['paras']['n_jobs'])
        assert  bool is type(paras['paras']['normalize'])
        assert  str is type(paras['file_name'])

    # def test_wrong_parameters(self):

    def test_errors(self, client):
        """
        Testing error arguments. The exception raised by the sci-kit learn will be returned in the error message.
        :param client:
        :return:
        """
        response = client.post(path='/cloudmesh-ai-services/linear-regression/test_upload',
                               data=json.dumps({
                                   'file_name': 'test_upload',
                                   'paras':
                                       {
                                           'fit_intercept': True,
                                           'error_para': False,
                                           'n_jobs': 1
                                       }
                               }),
                               content_type='application/json')
        assert b'{"error_message":"__init__() got an unexpected keyword argument \'error_para\'"}\n' \
               == \
               response.data

    # def test_learning(self):
    #     def f(p, q):
    #         return p+q
    #
    #     d = {'p':1, 'q':1}
    #
    #     print(f(**d))

def test_run_pca(client):
    response = client.get('/cloudmesh-ai-services/pca')

    assert response.data == ''



