from server import create_app
from flask import jsonify
import sys
import os
import json
from inspect import signature
from sklearn.linear_model import LinearRegression
from werkzeug.test import EnvironBuilder
from io import StringIO, BytesIO
import numpy as np
import pytest
import cloudmesh.analytics as ai

def test_config():
    """
    Test if configuration of the app is in the testing mode
    :return:
    """
    assert not create_app().testing
    assert create_app({'TESTING': True}).testing

# Mark the file test as first. The file uploaded will be used for other tests
@pytest.mark.first
class TestFileOperations:
    """
    Test file operations. The uploaded file is insulated and saved in the test_files directory
    """
    def post_file(self,client, path, name):
        f = open(path, 'rb')
        # Simulate post request to upload the file
        response = client.post(path='/cloudmesh-ai-services/file/upload',
                               data={'file': (f, name)})
        f.close()
        return response.data

    def test_success_upload(self, client):
        """
        Test upload. The file will be uploaded in to the current directory named files
        The test sample will use a empty csv file called test upload
        :param client:
        :return: A binary string that includes a list of uploaded file names
        """
        assert self.post_file(client, './test_assets/test_upload.csv','test_upload.csv') \
               == \
               b'{"file_name":"test_upload.csv"}\n'

    def test_success_upload_1(self, client):
        """
        Test upload. The file will be uploaded in to the current directory named files
        The test sample will use a empty csv file called test upload
        :param client:
        :return: A binary string that includes a list of uploaded file names
        """
        assert self.post_file(client, './test_assets/sample_matrix.csv','sample_matrix.csv') \
               == \
               b'{"file_name":"sample_matrix.csv"}\n'

    def test_success_upload_2(self, client):
        """
        Test upload. The file will be uploaded in to the current directory named files
        The test sample will use a empty csv file called test upload
        :param client:
        :return: A binary string that includes a list of uploaded file names
        """
        assert self.post_file(client, './test_assets/diabetes.csv','diabetes.csv') \
               == \
               b'{"file_name":"diabetes.csv"}\n'

    def test_format_error(self, client):
        """
        The upload will failed due to the txt file format. An error message will return.
        :param client:
        :return:
        """
        assert self.post_file(client, './test_assets/test_upload.csv', 'test_upload.txt') \
               == \
               b'{"error_message":"Wrong file format"}\n'

    def test_read(self, client):
        response = client.get(path='/cloudmesh-ai-services/file/read/sample_matrix')
        assert b'{"sample_matrix":[[1,2],[3,4],[5,6],[7,8],[9,10]]}\n' == response.data

class TestLinearRegression:

    @pytest.fixture(scope='class')
    def sample_paras(self):
        """
        Return a list sample parameters
        :return:
        """
        return np.load('../tests/test_assets/test_paras.npy', allow_pickle=True).item()

    # def test_generate_sample_parameters(self, client):
    #     """
    #     This is for generating the sample parameters
    #     :param client:
    #     :return:
    #     """
    #     response = client.post(path='/cloudmesh-ai-services/analytics/linear-regression/test_upload',
    #                            data=json.dumps({
    #                                'file_name': 'test_upload',
    #                                'paras':
    #                                    {
    #                                        'fit_intercept': True,
    #                                        'normalize': False,
    #                                        'n_jobs': 1
    #                                    }
    #                            }),
    #                            content_type='application/json')


    def test_parameters_type(self, sample_paras):
        """
        Test parameter types. The sample was generated by the server when received the body content.
        #TODO: The future update should make it dynamic
        :return:
        """
        paras = sample_paras

        assert  int is type(paras['paras']['n_jobs'])
        assert  bool is type(paras['paras']['normalize'])
        assert  str is type(paras['file_name'])

    # def test_wrong_parameters(self):

    def test_errors(self, client):
        """
        Testing error arguments. The exception raised by the sci-kit learn will be returned in the error message.
        :param client:
        :return:
        """
        response = client.post(path='/cloudmesh-ai-services/analytics/linear-regression/test_upload',
                               data=json.dumps({
                                   'file_name': 'test_upload',
                                   'paras':
                                       {
                                           'fit_intercept': True,
                                           'error_para': False,
                                           'n_jobs': 1
                                       }
                               }),
                               content_type='application/json')
        assert b'{"error":"__init__() got an unexpected keyword argument \'error_para\'"}\n' \
               == \
               response.data

    def test_linear_regression(self, client):
        """
        Testing error arguments. The exception raised by the sci-kit learn will be returned
                                   'file_name': 'diabetes',
                                   'paras': in the error message.
        :param client:
        :return:
        """
        response = client.post(path='/cloudmesh-ai-services/analytics/linear-regression/diabetes',
                               data=json.dumps({
                                   'paras':
                                       {
                                           'fit_intercept': True
                                       }
                               }),
                               content_type='application/json')
        assert b'{"coefficient":[-10.01219781747075,-239.81908936565543,519.8397867901347,324.390427689377' \
               b',-792.1841616283085,476.7458378236647,101.04457032134525,177.06417623225093,751.2793210873953' \
               b',67.62538639104389]}\n' == response.data

def test_run_pca(client):
    response = client.get('/cloudmesh-ai-services/analytics/pca')

    assert response.data == ''

def generate_file():
    """
    Converting the sci-kit learn built in sample data to the csv format
    :return:
    """
    data = np.load('./testing_files/diabetes.npy')
    target = np.load('./testing_files/diabetes_target.npy')
    target = np.reshape(target, (len(target),1))
    data = np.append(data, target, axis=1)
    np.savetxt("./testing_files/diabetes.csv", data, delimiter=",")


